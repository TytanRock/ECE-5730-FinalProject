/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"


int main()
{ 
  int ROW1, ROW2, COL1, COL2;
  int A[ROW1][COL1];
  int B[ROW2][COL2];
  char OP_SEL; //can be converted to integer
  int *RD_VAL;
  void *DISP_VAL;
  int i,j,k;
  while(1)
  {
	  //reading row and column size for matrix A and B
       RD_VAL=(int *)0x00011010;
      ROW1=*RD_VAL;
      RD_VAL=(int *)0x00011010;
      COL1=*RD_VAL;
      RD_VAL=(int *)0x00011010;
      ROW2=*RD_VAL;
      RD_VAL=(int *)0x00011010;
      COL2=*RD_VAL;

      //reading values into matrix A and B

      for (i=0;i<ROW1; i++)
      {
    	  for(j=0;j<COL1;j++)
    	  {
    		  RD_VAL=(int *)0x00011010;
    		  A[i][j]=*RD_VAL;
    	  }
      }
      for (i=0;i<ROW2; i++)
            {
         	  for(j=0;j<COL2;j++)
         	  {
         		  RD_VAL=(int *)0x00011010;
         		  B[i][j]=*RD_VAL;
         	  }
           }
       //selecting operator
      RD_VAL=(char *)0x00011010;
      OP_SEL=*RD_VAL;

    switch (OP_SEL){
    case '+':
    	matrix_add(A[ROW1][COL1],B[ROW2][COL2]);
    	break;
    case '-':
    	matrix_sub(A[ROW1][COL1],B[ROW2][COL2]);
    	break;
    case '*':
    	matrix_mul(A[ROW1][COL1],B[ROW2][COL2]);
    	break;
    case 'd':
    	matrix_det(A[ROW1][COL1],ROW1);
    	matrix_det(B[ROW2][COL2],ROW2);

  }

  

  /* Event loop never exits. */


  return 0;
}
